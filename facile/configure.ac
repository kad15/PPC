dnl
dnl autoconf input for Objective Caml programs
dnl Copyright (C) 2001 Jean-Christophe Filliâtre
dnl   from a first script by Georges Mariano 
dnl
dnl   Adapted to FaCiLe, a Functional Constraint Library
dnl                by Nicolas Barnier
dnl             barnier@recherche.enac.fr
dnl      Laboratoire d'Optimisation Globale, ENAC
dnl Copyright (C) 2006 Ecole Nationale de l'Aviation Civile
dnl
dnl
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Library General Public
dnl License version 2, as published by the Free Software Foundation.
dnl 
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
dnl 
dnl See the GNU Library General Public License version 2 for more details
dnl (enclosed in the file LGPL).


dnl the script generated by autoconf from this input will set the following
dnl variables:
dnl   OCAMLC        "ocamlc" if present in the path, or a failure
dnl                 or "ocamlc.opt" if present with same version number as ocamlc
dnl   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
dnl   OCAMLBEST     either "byte" if no native compiler was found, 
dnl                 or "opt" otherwise
dnl   OCAMLDEP      "ocamldep"
dnl   OCAMLLEX      "ocamllex" (or "ocamllex.opt" if present)
dnl   OCAMLYACC     "ocamlyac"
dnl   OCAMLLIB      the path to the ocaml standard library
dnl   OCAMLVERSION  the ocaml version number
dnl   OCAMLWIN32    "yes"/"no" depending on Sys.os_type = "Win32"
dnl   EXE           ".exe" if OCAMLWIN32=yes, "" otherwise

AC_INIT(FaCiLe,2.0,facile@recherche.enac.fr)

dnl check for one particular file of the sources
AC_CONFIG_SRCDIR(facile.mli)

dnl Check for C compiler
AC_PROG_CC

dnl Check for build tools
AC_PROG_INSTALL
AC_PROG_MAKE_SET


dnl Check for OCaml compilers

dnl we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC_PRESENT,ocamlc,yes,no)
if test "$OCAMLC_PRESENT" = no ; then
	AC_MSG_ERROR(cannot find ocamlc)
else
	OCAMLC=ocamlc
fi

dnl we extract OCaml version number
OCAML_MIN_VERSION=3.02
AC_MSG_CHECKING([OCaml compiler version >= $OCAML_MIN_VERSION])
OCAMLVERSION=[`"$OCAMLC" -version`]
AC_MSG_RESULT([installed version is $OCAMLVERSION])
dnl then we test if the version is not too old
if test `expr $OCAMLVERSION \< $OCAML_MIN_VERSION` = "1" ; then
	AC_MSG_ERROR([You need Objective Caml compiler version at least $OCAML_MIN_VERSION])
fi

dnl we extract OCaml library path
OCAMLLIB=`"$OCAMLC" -where`
AC_MSG_RESULT([OCaml library path is $OCAMLLIB])

dnl then we look for ocamlopt; if not present, we issue a warning
dnl if the version is not the same, we also discard it
dnl we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(cannot find ocamlopt, bytecode compilation only)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc, ocamlopt discarded)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

dnl checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc, ocamlc.opt discarded)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLC=$OCAMLCDOTOPT
	fi
fi

dnl checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version *\(.*\)$|\1|p' `
	if test "$TMPVER" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc, ocamlopt.opt discarded)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

dnl ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(cannot find ocamldep)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
    AC_MSG_ERROR(cannot find ocamllex)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
	OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(cannot find ocamlyacc)
fi

dnl AC_CHECK_PROG(OCAMLWEB,ocamlweb,ocamlweb,true)

AC_CHECK_PROG(OCAMLMKTOP_PRESENT,ocamlmktop,yes,no)
if test "$OCAMLMKTOP_PRESENT" = yes ; then
	OCAMLMKTOP=ocamlmktop
fi

dnl platform
AC_MSG_CHECKING(platform)
if echo "let _ = Sys.os_type" | ocaml | grep -q Win32; then
    AC_MSG_RESULT(Win32)
    OCAMLWIN32=yes
    EXE=.exe
else
    AC_MSG_RESULT(Unix)
    OCAMLWIN32=no
    EXE=
fi


dnl checking --with-fi option
NOFI="false"
FILIB_DIR="/usr/share/filib++"
AC_ARG_WITH([fi],
	    AS_HELP_STRING([--with-fi=dir],
			   [specify filib++ library directory]),
	    if test "$withval" != "no" ; then
		AC_CHECK_FILE($withval/lib/libfi.a,
				FILIB_DIR="$withval",
				AC_MSG_WARN([filib++ not found in $withval specified by --with-fi=dir option])
				NOFI="true")
	    else
		NOFI="true"
	    fi
)


dnl Checks if the path to filib++ is correct, otherwise try to
dnl find it with locate
if test "$NOFI" = "false"; then
	AC_CHECK_FILE($FILIB_DIR/lib/libfi.a, LIBFIA_FILE="yes", LIBFIA_FILE="no")
	if test "$LIBFIA_FILE" = "no"; then
		AC_MSG_WARN([filib++ not in the standard path, and none was specified])
		AC_MSG_WARN([trying to find filib++ directory with the locate program])
		AC_CHECK_PROG(LOCATE, locate, yes, no)
		if test "$LOCATE" = "yes" ; then
			LOCATE_FI=`locate libfi.a`
			if test "$LOCATE_FI" != "" ; then
				FILIB_DIR=`echo $LOCATE_FI | head -n 1 | sed 's/\/lib\/libfi.a//'`
				echo "filib++ found in" $FILIB_DIR
				NOFI="false"
			else
				AC_MSG_WARN([unable to find filib++, try ./configure --with-fi=dir])
				NOFI="true"
			fi
		else
			AC_MSG_WARN([unable to find filib++, try ./configure --with-fi=dir])
			NOFI="true"
		fi
	fi
fi


dnl Checks ocamlmklib, C++ compiler and filib++
if test "$NOFI" = "true" ; then
	AC_MSG_RESULT(filib++ disabled)
else
	dnl Checking for ocamlmklib
	AC_CHECK_PROG(OCAMLMKLIB_PRESENT,ocamlmklib,yes,no)
	if test "$OCAMLMKLIB_PRESENT" = yes ; then
		OCAMLMKLIB=ocamlmklib

		dnl Checking for C++ compiler
		AC_PROG_CXX
		AC_CHECK_PROG(CXX_PRESENT, $CXX, yes, no)
		if test "$CXX_PRESENT" = "yes"; then
			CPPFLAGS="${CPPFLAGS} -I$FILIB_DIR/include"
			LDFLAGS="${LDFLAGS} -L$FILIB_DIR/lib"
			CXXFLAGS="${CXXFLAGS} -lfi -lieee -lm"

			AC_LANG_PUSH(C++)
			AC_MSG_CHECKING([filib++])
			AC_TRY_LINK(
[#include <iostream>
#include <Interval.h>
#define FILIB_NAMESPACES
#define FILIB_EXTENDED],
	
				[filib::Interval c(0., 1.)],
				[SUPPORT_FI=yes],
				[SUPPORT_FI=no])
			AC_LANG_POP(C++)
			AC_MSG_RESULT($SUPPORT_FI)
		else
			SUPPORT_FI="no"
		fi
	fi
fi

dnl targets and Makefiles
MAKEFILES=Makefile
echo "configuring" $PACKAGE_STRING
if test "$SUPPORT_FI" = "no" -o "$NOFI" = "true" ; then
	AC_MSG_NOTICE(floating point variables disabled)
	if test "$OCAMLBEST" = "byte" ; then
		AC_MSG_NOTICE(bytecode only)
		TARGET=all_facile_byte
	else
		TARGET=all_facile
	fi
else
	AC_MSG_NOTICE(floating point variables enabled)
	MAKEFILES="$MAKEFILES fi_ocaml/Makefile"
	if test "$OCAMLBEST" = "byte" ; then
		AC_MSG_NOTICE(bytecode only)
		TARGET=all_float_facile_byte
	else
		TARGET=all_float_facile
	fi
fi

dnl substitutions to perform
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
dnl AC_SUBST(OCAMLBEST)
dnl AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
dnl AC_SUBST(OCAMLWEB)
AC_SUBST(OCAMLMKTOP)
AC_SUBST(OCAMLMKLIB)
dnl AC_SUBST(OCAMLWIN32)
dnl AC_SUBST(EXE)

AC_SUBST(TARGET)
AC_SUBST(CXX)
AC_SUBST(FILIB_DIR)

dnl Finally create the Makefile from Makefile.in
AC_CONFIG_FILES($MAKEFILES)
AC_OUTPUT
