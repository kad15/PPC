(* code paramétré par un module A *)
module type ANGLE = sig
 type t
 val of_degrees: float -> t
 val add: t -> t -> t
 val cos: t -> float
 val sin t -> float
end

(*le type t est celui des angles ; il n'a pas de définition.
on dit que c'est un type abstrait. on peut neanmois l'utiliser
car une fonc tion of_degrees est fournie pour convertir des float degrés en type t *)

(*add : ajoute 2 angles*)

(* foncteur : on peut écrire la tortue logo sous la forme d'un module tortue paramétré 
par un module A de signature ANGLE. un tel module est APPELE UN FONCTEUR
QUI EST DÉFINI AINSI :  module tortue(A: ANGLE) = struct ... end *)

(* module Turtle est un FUNCTOR paramétré par le module A qui "exporte" les types
indiqués dans l'interface = signature ANGLE *)
module Turtle(A: ANGLE) = struct

  let draw = ref true
  let pen_down () = draw := true
  let pen_up   () = draw := false
(* à l'intérieur du foncteur-module A est visible et s'utilise 
comme n'importe quel module  *)
  let angle = ref (A.of_degrees 0.)
  let rotate_left d = angle := A.add !angle (A.of_degrees d)
  let rotate_right d = rotate_left (-. d)

open Graphics
  let tx = ref 400.
  let ty = ref 300.
  let () = open_graph " 800x600"; moveto 400 300; set_line_width 2

  let advance d =
    tx := !tx +. d *. A.cos !angle;
    ty := !ty +. d *. A.sin !angle;
    if !draw then lineto (truncate !tx) (truncate !ty)
             else moveto (truncate !tx) (truncate !ty)

end

(*A l'intérieur du module tortue le module A de signature ANGLE est visible et s'utilise
comme tout autre module. par exemple, on peut introduire une référence angles contenant
la direction courante e la tortue avec 
let angle = ref (A.of_degrees 0.)

fonc qui fait tourner  la tortue de d degre vers lagauch
let rotate_left d = angle :=A.add !angle (A.of_degrees d)

*) 


