open Facile open Easy
open Scanf open Printf

(* ********* outils perso ********** *)

  
(* transpose matrix   *)
let transpose matrix  =
  let nb_lig = Array.length matrix and nb_col = Array.length matrix.(0) in
  Array.init nb_col (fun j -> Array.init nb_lig (fun i -> matrix.(i).(j)))
    
(* print array *)
let print_array a =
  Array.iter (fun x -> Printf.printf "%d " x) a;
    print_newline()

(* print array of array *)
let print_matrix m =
  let print_array a =
  Array.iter (fun x -> Printf.printf "%d " x) a in
  Array.iter (fun mi -> print_array mi;print_newline()) m;
  print_newline()

(* flatten a  matrice n * m in an array of size n*m *)
let flatten mat =
  let n = Array.length mat and m = Array.length mat.(0) in
  let flat = Array.make (n*m) 0 in
  for i = 0 to n-1 do
    for j = 0 to m-1 do
      flat.(m*i+j) <- mat.(i).(j)
    done
  done;
  flat
    
(* transform an ocaml array vector of size n*m in a matrix n*m  *) 
let array_to_matrix vector n m =
  Array.init n (fun i -> Array.sub vector (i*m) m)

(* return the first diagonal of a matrice n*n *)
let diagonal1 mat = let n = Array.length mat in
Array.init n (fun i -> mat.(i).(i))

(* return the second diagonal of a square matrice *)
let diagonal2 mat =
  let n = Array.length mat in
  Array.init n (fun i -> mat.(i).(n-1-i))

(* ********* fin outils perso ********** *)

let read file =
  let chin = open_in file in
  let (m,n) = fscanf chin "%d %d" (fun n m -> (m,n)) in
  (*nbc : nb de cstr de compatibilité *)
  let nbc = fscanf chin "%d" (fun nbc -> nbc) in 
  let cc = Array.make_matrix nbc 3 0 in
  let genders = Array.make n 0 in
  for i = 0 to nbc-1 do
    for j = 0 to 2 do
      let a = fscanf chin "%d" (fun a ->a) in
      cc.(i).(j)<-a;
    done
  done;
  for i = 0 to n-1 do
    let b = fscanf chin "%d" (fun b ->b) in
    genders.(i)<-b
    (* let genders.(i) <- fscanf chin "%d" (fun b ->b)  *)
  done;
  (n, m, nbc, cc, genders)

      
let print_sol ch sol =
  Array.iteri
    (fun i soli ->
      fprintf ch "table %d : " i;
      Array.iteri
        (fun j solij ->
          if Fd.elt_value solij = 1 then
            fprintf ch "%2d " j) soli;
      fprintf ch "\n") sol

let solve = fun (m, n , nbc, genders) ->
(* 1  *)
(* m : nombre de tables = nb de ligne de la matrice table*)
(* n : nb d'invités *)
  let table = Array.init m (fun _ -> Fd.array n 0 1) in

(*  2. [4pt] Add the main structural constraints of the problem: *)
(* • the number of guests at each table is k; *)
let k = n/m in
      Array.iter
      (fun tablei -> Cstr.post(Arith.sum_fd tablei =~ i2e k) )
      table;
(* • a guest is seated at exactly one table. *)
  (* les invités sont les m colonnes de la matrice table *)
  (* la somme sur les colonnes de table doit donc être = 1 *)
  (* <=> somme sur les lignes de la transposée de table = 1  *)
  
let t_table = transpose table in
Array.iter
      (fun t_tablei -> Cstr.post(Arith.sum_fd t_tablei =~ i2e 1) )
     t_table;

(* 3. [3pt] Define auxiliary variables guest 
where guest.(j) represents the table at which guest j is *)
(* seated, according to the following expression defined for any j: *)
let coefs = Array.init m (fun i -> i)
    
(* print_array coefs *)
(* let guests = *)
(*   Array.init n ( *)
(*   fun j -> Arith.e2fd ( *)
(*     Arith.scalprod_fd coefs ( *)
(*     Array.init m ( *)
(*     fun i -> table.(i).(j)))))  *)




(* let ps vec = Arith.e2fd(Arith.scalprod_fd coefs vec) *)
(* (\* let guest = Fd.array n 0 (m-1) in *\) *)
    
(* let guest = Array.init n (  (fun t_tablej -> *)
(*   Arith.e2fd(Arith.scalprod_fd coefs t_tablej) *)
(*                        ) t_table) *)

    (* Array.map (fun ) guest *)

    (* for j=0 to (n-1) do *)
    (*   guest.(j) <-  Arith.e2fd(Arith.scalprod_fd coefs t_tablej) *)
    (*                    ) t_table  *)
 


      
    
(* let () = *)
(*   let file = Sys.argv.(1) in *)
(*   let (n,m,nbc,cc,genders) = read file in *)
(*   solve (n, m,nbc,cc,genders) *)
      
